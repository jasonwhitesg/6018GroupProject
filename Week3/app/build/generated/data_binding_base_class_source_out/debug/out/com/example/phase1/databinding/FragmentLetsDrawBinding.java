// Generated by view binder compiler. Do not edit!
package com.example.phase1.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.phase1.CustomView;
import com.example.phase1.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLetsDrawBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button button2;

  @NonNull
  public final CustomView customView;

  @NonNull
  public final LinearLayout leftToolsPanel;

  @NonNull
  public final ImageView myImage;

  @NonNull
  public final LinearLayout topToolbar;

  private FragmentLetsDrawBinding(@NonNull LinearLayout rootView, @NonNull Button button2,
      @NonNull CustomView customView, @NonNull LinearLayout leftToolsPanel,
      @NonNull ImageView myImage, @NonNull LinearLayout topToolbar) {
    this.rootView = rootView;
    this.button2 = button2;
    this.customView = customView;
    this.leftToolsPanel = leftToolsPanel;
    this.myImage = myImage;
    this.topToolbar = topToolbar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLetsDrawBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLetsDrawBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_lets_draw, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLetsDrawBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button2;
      Button button2 = ViewBindings.findChildViewById(rootView, id);
      if (button2 == null) {
        break missingId;
      }

      id = R.id.customView;
      CustomView customView = ViewBindings.findChildViewById(rootView, id);
      if (customView == null) {
        break missingId;
      }

      id = R.id.leftToolsPanel;
      LinearLayout leftToolsPanel = ViewBindings.findChildViewById(rootView, id);
      if (leftToolsPanel == null) {
        break missingId;
      }

      id = R.id.my_image;
      ImageView myImage = ViewBindings.findChildViewById(rootView, id);
      if (myImage == null) {
        break missingId;
      }

      id = R.id.topToolbar;
      LinearLayout topToolbar = ViewBindings.findChildViewById(rootView, id);
      if (topToolbar == null) {
        break missingId;
      }

      return new FragmentLetsDrawBinding((LinearLayout) rootView, button2, customView,
          leftToolsPanel, myImage, topToolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
